
	constexpr float low_bound = -50.0f, upper_bound = 50.0f;

	std::array<float, 20> positions
	{
		low_bound	, low_bound		, 0.0f, 0.0f,
		upper_bound	, low_bound		, 1.0f, 0.0f,
		upper_bound	, upper_bound	, 1.0f, 1.0f,
		low_bound	, upper_bound	, 0.0f, 1.0f,
	};

	std::array<unsigned int, 6> indices
	{
		0, 1, 2,
		2, 3, 0
	};

	gl::vertex_array vao;
	gl::vertex_buffer vbo { &positions, positions.size() * sizeof(float) };
	gl::index_buffer ibo {(const unsigned int*)&indices, 6u};
	gl::buffer_layout blo;

	blo.push<float>(2);
	blo.push<float>(2);
	vao.add_buffer(vbo, blo);

	gl::shader shader{ "shader.vert", "shader.frag" };

	
	glm::mat4 view			= glm::translate(glm::mat4{ 1.0f }, glm::vec3(0, 0, 0));
	glm::mat4 projection	= glm::ortho(0.0f, 800.0f, 0.0f, 800.0f, -1.0f, 1.0f);

	vao.bind();
	ibo.bind();
	vbo.bind();
	shader.bind();

	gl::texture texture("assets/image_transparent.png");
	//gl::texture texture("assets/image.png");
	//gl::texture texture("assets/image.png");
	texture.bind();

	shader.setUniformInt1("u_texture", 0);

	vao.unbind();
	vbo.unbind();
	ibo.unbind();
	shader.unbind();
	
	bool show_demo_window = true;
	bool show_another_window = false;
	ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

	glm::vec3 translationA(200, 200, 0);
	glm::vec3 translationB(400, 200, 0);


	{
			ImGui::SliderFloat3("Translate A", &translationA.x, 0.0f, 800.0f);
			ImGui::SliderFloat3("Translate B", &translationB.x, 0.0f, 800.0f);
		}